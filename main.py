#!/usr/bin/env python3
"""
TikTok Account Registration Script
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã TikTok –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–∫—Å–∏ –∏ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏
"""

import asyncio
import os
import json
import random
import string
import time
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from loguru import logger
from playwright.async_api import async_playwright, Page
from playwright_stealth import stealth_async, StealthConfig
# from tiktok_captcha_solver import AsyncPlaywrightSolver

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
_last_email_request_time = 0
_email_request_lock = None

# –ö–æ–ø–∏—Ä—É–µ–º Config —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
@dataclass 
class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∫—Ä–∏–ø—Ç–∞"""
    sadcaptcha_api_key: str = "23b91c44c9735cb336aaf2ff46335d48"

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    accounts_filename: str = "acc.txt"
    proxies_filename: str = "proxies.txt"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–∞—É–∑–µ—Ä–∞
    max_browsers: int = 10
    browser_headless: bool = False

    # –¢–∞–π–º–∞—É—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    page_load_timeout: int = 30
    captcha_check_timeout: int = 60
    action_delay: float = 0.5
    
    # –ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
    delay_min: int = 60
    delay_max: int = 180
    threads: int = 1

    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    browser_args: List[str] = field(default_factory=lambda: [
        '--no-sandbox',
        '--disable-gpu',
        '--disable-dev-shm-usage',
        '--disable-extensions',
        '--disable-setuid-sandbox',
        '--disable-infobars',
        '--disable-web-security',
        '--disable-features=IsolateOrigins,site-per-process',
        '--disable-site-isolation-trials',
        '--ignore-certificate-errors',
        '--disable-accelerated-2d-canvas',
        '--disable-browser-side-navigation',
        '--disable-default-apps',
        '--no-first-run'
    ])

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    browser_context_options: Dict[str, Any] = field(default_factory=lambda: {
        'viewport': {'width': 1920, 'height': 1080},
        'locale': 'ru-RU',
        'timezone_id': 'Europe/Moscow',
        'ignore_https_errors': True,
        'java_script_enabled': True,
    })

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è stealth-—Ä–µ–∂–∏–º–∞
    stealth_config: Dict[str, bool] = field(default_factory=lambda: {
        'navigator_languages': False,
        'navigator_vendor': False,
        'navigator_user_agent': False
    })

class CaptchaSolver:
    """–ü—Ä–æ—Å—Ç–æ–π —Ä–µ—à–∞—Ç–µ–ª—å –∫–∞–ø—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Playwright"""

    def __init__(self, page, api_key, config, **kwargs):
        self.page = page
        self.api_key = api_key
        self.config = config

    async def solve_captcha_if_present(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É"""
        try:
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await asyncio.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–∞–ø—á–∏
            captcha_found = False

            # reCAPTCHA v2
            recaptcha_frame = await self.page.query_selector('iframe[src*="recaptcha"]')
            if recaptcha_frame:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ reCAPTCHA v2")
                await self._handle_recaptcha_v2()
                captcha_found = True

            # hCaptcha
            hcaptcha_frame = await self.page.query_selector('iframe[src*="hcaptcha"]')
            if hcaptcha_frame:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ hCaptcha")
                await self._handle_hcaptcha()
                captcha_found = True

            # –î—Ä—É–≥–∏–µ –≤–∏–¥—ã –∫–∞–ø—á–∏
            generic_captcha = await self.page.query_selector('.captcha, [data-testid="captcha"], div[class*="captcha"]')
            if generic_captcha:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞")
                await self._handle_generic_captcha()
                captcha_found = True

            if captcha_found:
                # –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∫–∞–ø—á–∏
                await asyncio.sleep(3)

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏: {e}")

    async def _handle_recaptcha_v2(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ reCAPTCHA v2"""
        try:
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ iframe
            await asyncio.sleep(2)

            # –ï—Å–ª–∏ API –∫–ª—é—á —É–∫–∞–∑–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if self.api_key and self.api_key != "SADCAPTCHA_API_KEY":
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è —Ä–µ—à–µ–Ω–∏—è reCAPTCHA...")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å 2captcha –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
                # —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                await asyncio.sleep(5)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è
            else:
                logger.warning("ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ reCAPTCHA! –†–µ—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –∏ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É...")
                # –ñ–¥–µ–º –ø–æ–∫–∞ –∫–∞–ø—á–∞ –∏—Å—á–µ–∑–Ω–µ—Ç
                for _ in range(self.config.captcha_check_timeout):  # –∂–¥–µ–º –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞
                    await asyncio.sleep(1)
                    recaptcha_frame = await self.page.query_selector('iframe[src*="recaptcha"]')
                    if not recaptcha_frame:
                        break

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ reCAPTCHA: {e}")

    async def _handle_hcaptcha(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ hCaptcha"""
        try:
            if self.api_key and self.api_key != "SADCAPTCHA_API_KEY":
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è —Ä–µ—à–µ–Ω–∏—è hCaptcha...")
                await asyncio.sleep(5)
            else:
                logger.warning("ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ hCaptcha! –†–µ—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –∏ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É...")
                for _ in range(self.config.captcha_check_timeout):
                    await asyncio.sleep(1)
                    hcaptcha_frame = await self.page.query_selector('iframe[src*="hcaptcha"]')
                    if not hcaptcha_frame:
                        break

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ hCaptcha: {e}")

    async def _handle_generic_captcha(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–π –∫–∞–ø—á–∏"""
        try:
            logger.warning("ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞! –†–µ—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –∏ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É...")
            # –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–ø—á–∏
            for _ in range(self.config.captcha_check_timeout // 2):  # –ø–æ–ª–æ–≤–∏–Ω–∞ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–∞–ø—á–∏
                await asyncio.sleep(1)
                generic_captcha = await self.page.query_selector('.captcha, [data-testid="captcha"], div[class*="captcha"]')
                if not generic_captcha:
                    break

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ø—á–∏: {e}")


def load_config() -> Config:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    config = Config()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º config.json –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists('config.json'):
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                config_data = json.load(f)
                for key, value in config_data.items():
                    if hasattr(config, key) and not key.startswith('_'):
                        setattr(config, key, value)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config.sadcaptcha_api_key = os.getenv('SADCAPTCHA_API_KEY', config.sadcaptcha_api_key)

    return config

class ProxyManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""

    def __init__(self, config: Config):
        self.proxies = []
        self.current_index = 0
        self.load_proxies(config.proxies_filename)

    def load_proxies(self, filename: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and ':' in line:
                        parts = line.split(':')
                        if len(parts) == 4:
                            ip, port, username, password = parts
                            proxy_dict = {
                                'server': f'http://{ip}:{port}',
                                'username': username,
                                'password': password
                            }
                            self.proxies.append(proxy_dict)

            # –ü—Ä–æ–∫—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã

        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")

    def get_next_proxy(self) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏"""
        if not self.proxies:
            return None

        proxy = self.proxies[self.current_index]
        self.current_index = (self.current_index + 1) % len(self.proxies)
        return proxy

class DataGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""

    @staticmethod
    async def generate_email(window_id: int = 0) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π email —á–µ—Ä–µ–∑ API mail.tm —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
        global _last_email_request_time, _email_request_lock
        
        import urllib.request
        import urllib.parse
        import json

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–æ–∑–¥–∞–µ–º –ª–µ–Ω–∏–≤–æ)
        global _email_request_lock
        if _email_request_lock is None:
            _email_request_lock = asyncio.Lock()
        
        async with _email_request_lock:
            # –õ–æ–≥–∏ email generation –æ—Ç–∫–ª—é—á–µ–Ω—ã
            current_time = time.time()
            time_since_last_request = current_time - _last_email_request_time
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 3 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 429 –æ—à–∏–±–æ–∫
            if time_since_last_request < 3.0:
                wait_time = 3.0 - time_since_last_request
                # –û–∂–∏–¥–∞–Ω–∏–µ
                await asyncio.sleep(wait_time)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –°–†–ê–ó–£, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
            _last_email_request_time = time.time()
            # –í—Ä–µ–º—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ
            
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º cooldown
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º 3-—Å–µ–∫—É–Ω–¥–Ω—ã–π cooldown –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        if attempt > 0:  # –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                            current_time = time.time()
                            time_since_last = current_time - _last_email_request_time
                            if time_since_last < 3.0:
                                wait_time = 3.0 - time_since_last
                                # –î–æ–ø. –æ–∂–∏–¥–∞–Ω–∏–µ
                                await asyncio.sleep(wait_time)
                            _last_email_request_time = time.time()
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω—ã
                        
                        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
                        with urllib.request.urlopen("https://api.mail.tm/domains", timeout=10) as response:
                            if response.status == 200:
                                domains_data = json.loads(response.read().decode('utf-8'))
                                available_domains = domains_data.get('hydra:member', [])

                                if not available_domains:
                                    raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤")

                                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–æ–º–µ–Ω (–∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
                                domain = available_domains[random.randint(0, min(2, len(available_domains)-1))]['domain']
                                # –î–æ–º–µ–Ω –≤—ã–±—Ä–∞–Ω
                            else:
                                raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤: {response.status}")

                        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É GET –∏ POST
                        current_time = time.time()
                        time_since_last = current_time - _last_email_request_time
                        if time_since_last < 3.0:
                            wait_time = 3.0 - time_since_last
                            # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                            await asyncio.sleep(wait_time)
                        
                        _last_email_request_time = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ POST

                        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                        username = ''.join(random.choices(string.ascii_lowercase, k=random.randint(6, 12)))
                        username += str(random.randint(100, 9999))
                        email = f"{username}@{domain}"
                        password = ''.join(random.choices(string.ascii_letters + string.digits, k=16))

                        # 3. –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                        # –°–æ–∑–¥–∞–µ–º email
                        account_data = {
                            "address": email,
                            "password": password
                        }

                        req_data = json.dumps(account_data).encode('utf-8')
                        req = urllib.request.Request(
                            "https://api.mail.tm/accounts",
                            data=req_data,
                            headers={'Content-Type': 'application/json'},
                            method='POST'
                        )

                        with urllib.request.urlopen(req, timeout=10) as response:
                            if response.status in [200, 201]:
                                account_info = json.loads(response.read().decode('utf-8'))
                                # Email –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω
                                
                                return {
                                    "email": email,
                                    "password": password,
                                    "account_id": account_info.get('id', '')
                                }
                            elif response.status == 429:
                                raise Exception(f"Rate limit exceeded (429) - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
                            else:
                                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {response.status}")
                                
                        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —É—Å–ø–µ—Ö, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                        break
                        
                    except Exception as retry_e:
                        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                        if attempt == max_retries - 1:
                            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                            raise retry_e
                        
                        # –î–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ cooldown –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥. –ø–æ–ø—ã—Ç–∫–µ

            except Exception as e:
                # –û—à–∏–±–∫–∞ mail.tm, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ fallback
                # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è fallback
                username = ''.join(random.choices(string.ascii_lowercase, k=random.randint(6, 12)))
                username += str(random.randint(100, 9999))
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 1secmail.com - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–æ–º–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤
                fallback_email = f"{username}@1secmail.com"
                # Fallback email
                
                return {
                    "email": fallback_email,
                    "password": "fallback",
                    "account_id": ""
                }

    @staticmethod
    def generate_password() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1 –±–æ–ª—å—à–∞—è –±—É–∫–≤–∞ + 5 –º–∞–ª–µ–Ω—å–∫–∏—Ö –±—É–∫–≤ + _ + 4 —Ü–∏—Ñ—Ä—ã"""
        # 1 –±–æ–ª—å—à–∞—è –±—É–∫–≤–∞
        uppercase = random.choice(string.ascii_uppercase)
        
        # 5 –º–∞–ª–µ–Ω—å–∫–∏—Ö –±—É–∫–≤
        lowercase = ''.join(random.choices(string.ascii_lowercase, k=5))
        
        # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
        underscore = '_'
        
        # 4 —Ü–∏—Ñ—Ä—ã
        digits = ''.join(random.choices(string.digits, k=4))
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å: Abcdef_1234
        password = uppercase + lowercase + underscore + digits
        
        return password

    @staticmethod
    def generate_username(prefix: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∏–∫–Ω–µ–π–º: –ø—Ä–µ—Ñ–∏–∫—Å_8—Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: aiogramxd_sd21dr43)"""
        # 8 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
        username = f"{prefix}_{random_suffix}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–º–∞–∫—Å–∏–º—É–º –¥–ª—è TikTok 24 —Å–∏–º–≤–æ–ª–∞)
        if len(username) > 24:
            # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            max_prefix_len = 24 - 8 - 1  # -1 –¥–ª—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            username = f"{prefix[:max_prefix_len]}_{random_suffix}"

        return username

    @staticmethod
    def generate_birth_date() -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (18-25 –ª–µ—Ç)"""
        current_year = datetime.now().year
        birth_year = random.randint(current_year - 25, current_year - 18)
        birth_month = random.randint(1, 12)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –º–µ—Å—è—Ü–∞
        if birth_month in [1, 3, 5, 7, 8, 10, 12]:
            max_day = 31
        elif birth_month in [4, 6, 9, 11]:
            max_day = 30
        else:  # —Ñ–µ–≤—Ä–∞–ª—å
            max_day = 28 if birth_year % 4 != 0 else 29

        birth_day = random.randint(1, max_day)

        return {
            'day': str(birth_day),
            'month': str(birth_month),
            'year': str(birth_year)
        }

    @staticmethod
    def get_random_user_agent() -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π User-Agent"""
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:119.0) Gecko/20100101 Firefox/119.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0"
        ]
        return random.choice(user_agents)

class TikTokRegistration:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ TikTok"""

    def __init__(self, config: Config, username_prefix: str = "", output_filename: str = "acs.txt"):
        self.config = config
        self.proxy_manager = ProxyManager(config)
        self.data_generator = DataGenerator()
        self.successful_accounts = []
        self.failed_count = 0
        self.accounts_output_filename = output_filename
        self.username_prefix = username_prefix

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.add("registration.log", 
                  format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
                  level="INFO")

    def count_accounts_in_file(self) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ"""
        try:
            with open(self.accounts_output_filename, 'r', encoding='utf-8') as f:
                return len([line for line in f if line.strip()])
        except FileNotFoundError:
            return 0

    async def create_browser_context(self, browser_id: int):
        """–°–æ–∑–¥–∞—ë—Ç –±—Ä–∞—É–∑–µ—Ä –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
        proxy = self.proxy_manager.get_next_proxy()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
        browser_options = {
            'headless': self.config.browser_headless,
            'args': self.config.browser_args + [
                '--incognito',  # –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor'
            ]
        }
        
        if proxy:
            browser_options['proxy'] = proxy
            logger.info(f"üîí –û–∫–Ω–æ {browser_id}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy['server']}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π playwright —ç–∫–∑–µ–º–ø–ª—è—Ä
        p = await async_playwright().start()
        browser = await p.chromium.launch(**browser_options)
        
        # –°–æ–∑–¥–∞—ë–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = await browser.new_context(
            user_agent=self.data_generator.get_random_user_agent(),
            viewport={'width': 1920, 'height': 1080},
            locale='ru-RU',
            timezone_id='Europe/Moscow',
            # –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
            accept_downloads=False,
            ignore_https_errors=True
        )
        
        logger.info(f"üïµÔ∏è –û–∫–Ω–æ {browser_id}: —Å–æ–∑–¥–∞–Ω –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
        return browser, context

    async def register_account(self) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç TikTok"""

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        email_data = await self.data_generator.generate_email(window_id=0)  # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        email = email_data["email"]
        email_password = email_data["password"]
        account_id = email_data["account_id"]

        password = self.data_generator.generate_password()
        birth_date = self.data_generator.generate_birth_date()
        user_agent = self.data_generator.get_random_user_agent()
        username = self.data_generator.generate_username(self.username_prefix) if self.username_prefix else ""

        print(f"‚öôÔ∏è –ù–∞—á–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {email}")

        try:
            async with async_playwright() as p:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
                proxy = self.proxy_manager.get_next_proxy()

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                browser_options = {
                    'headless': self.config.browser_headless,
                    'args': self.config.browser_args
                }

                if proxy:
                    browser_options['proxy'] = proxy
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy['server']}")

                browser = await p.chromium.launch(**browser_options)

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º User-Agent
                context = await browser.new_context(
                    user_agent=user_agent,
                    viewport={'width': 1920, 'height': 1080},
                    locale='ru-RU',
                    timezone_id='Europe/Moscow'
                )

                page = await context.new_page()
                page.set_default_timeout(self.config.page_load_timeout * 1000)

                try:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º stealth —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    try:
                        stealth_config = StealthConfig(
                            navigator_languages=False,
                            navigator_vendor=False,
                            navigator_user_agent=False
                        )
                        await stealth_async(page, stealth_config)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å stealth: {e}")

                    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–ø—á–∞ solver
                    captcha_solver = CaptchaSolver(
                        page,
                        self.config.sadcaptcha_api_key,
                        self.config
                    )

                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ TikTok")
                    await page.goto('https://www.tiktok.com/signup/phone-or-email/email', timeout=60000)
                    await asyncio.sleep(self.config.action_delay)

                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    await self._handle_terms_popup(page)

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    success = await self._fill_registration_form(page, email, password, birth_date, captcha_solver, email_password, account_id, username)

                    if success:
                        print(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {email}")
                        self.successful_accounts.append({
                            'email': email,
                            'password': password,
                            'username': username,
                            'registered_at': datetime.now().isoformat()
                        })
                        self._save_account(email, password, username)
                        accounts_count = self.count_accounts_in_file()
                        print(f"üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {accounts_count}")
                        return True
                    else:
                        print(f"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {email}")
                        self.failed_count += 1
                        return False

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {email}: {type(e).__name__}: {str(e)}")
                    self.failed_count += 1
                    return False

                finally:
                    await browser.close()

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {email}: {type(e).__name__}: {str(e)}")
            self.failed_count += 1
            return False

    async def _analyze_page_structure(self, page: Page):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤)"""
        # –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤
        pass

    async def _handle_terms_popup(self, page: Page):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        try:
            await asyncio.sleep(2)  # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π
            accept_buttons = [
                'button:has-text("–ü—Ä–∏–Ω—è—Ç—å")',
                'button:has-text("Accept")',
                'button:has-text("Agree")',
                'button:has-text("–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")',
                'button:has-text("OK")',
                'button:has-text("Continue")',
                '[data-e2e="accept-button"]',
                '[data-testid="accept-button"]'
            ]
            
            for selector in accept_buttons:
                try:
                    button = await page.query_selector(selector)
                    if button and await button.is_visible():
                        await button.click()
                        await asyncio.sleep(1)
                        return True
                except:
                    continue
                    
            return False
        except Exception:
            return False

    async def _fill_registration_form(self, page: Page, email: str, password: str, birth_date: Dict, captcha_solver, email_password: str = "", account_id: str = "", username: str = "") -> bool:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            month_filled = day_filled = year_filled = False
            date_filled = False

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await asyncio.sleep(5)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏
            await self._handle_terms_popup(page)

            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤

            # TikTok –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ dropdown'—ã, –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ <select>
            # –ò—â–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º

            # –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∫—Ä–∞—â–µ–Ω –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
            all_selects = await page.query_selector_all('select')
            custom_dropdowns = await page.query_selector_all('[class*="Select"], [class*="select"], [class*="dropdown"], [class*="Dropdown"]')
            date_elements = await page.query_selector_all('[placeholder*="–º–µ—Å—è—Ü"], [placeholder*="–¥–µ–Ω—å"], [placeholder*="–≥–æ–¥"], [aria-label*="month"], [aria-label*="day"], [aria-label*="year"]')
            month_elements = await page.query_selector_all('*:has-text("–ú–µ—Å—è—Ü")')
            day_elements = await page.query_selector_all('*:has-text("–î–µ–Ω—å")')  
            year_elements = await page.query_selector_all('*:has-text("–ì–æ–¥")')

            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            date_filled = False

            # –°–ø–æ—Å–æ–± 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ select —ç–ª–µ–º–µ–Ω—Ç—ã
            if len(all_selects) >= 3:
                # –í–µ—Ä–æ—è—Ç–Ω–æ –µ—Å—Ç—å 3 —Å–µ–ª–µ–∫—Ç–∞ –¥–ª—è –¥–∞—Ç—ã
                # –ü—Ä–æ–±—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞—Ç—É

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π select —ç–ª–µ–º–µ–Ω—Ç
                for i, select_elem in enumerate(all_selects[:3]):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏ select —ç–ª–µ–º–µ–Ω—Ç–∞
                        options = await select_elem.query_selector_all('option')
                        # –û–ø—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è

                        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        for j, option in enumerate(options[:5]):
                            try:
                                option_value = await option.get_attribute('value')
                                option_text = await option.inner_text()
                                # –û–ø—Ü–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
                            except:
                                pass
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ select {i}: {e}")

                try:
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ—Å—è—Ü (–ø–µ—Ä–≤—ã–π select)
                    month_select = all_selects[0]
                    month_value = birth_date['month']

                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–µ—Å—è—Ü–∞
                    month_formats = [
                        month_value,  # "5"
                        str(int(month_value)).zfill(2),  # "05"
                        str(int(month_value) - 1),  # "4" (–µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0)
                        str(int(month_value) - 1).zfill(2)  # "04"
                    ]

                    month_filled = False
                    for fmt in month_formats:
                        try:
                            await month_select.select_option(value=fmt)
                            # –ú–µ—Å—è—Ü –∑–∞–ø–æ–ª–Ω–µ–Ω
                            month_filled = True
                            break
                        except:
                            continue

                    if not month_filled:
                        # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ click –∏ –≤—ã–±–æ—Ä –ø–æ —Ç–µ–∫—Å—Ç—É
                        await month_select.click()
                        await asyncio.sleep(0.5)
                        # –ò—â–µ–º –æ–ø—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É –º–µ—Å—è—Ü–∞
                        month_option = await month_select.query_selector(f'option:nth-child({int(month_value) + 1})')
                        if month_option:
                            await month_option.click()
                            # –ú–µ—Å—è—Ü –∑–∞–ø–æ–ª–Ω–µ–Ω
                            month_filled = True

                    await asyncio.sleep(1)

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ–Ω—å (–≤—Ç–æ—Ä–æ–π select)
                    day_select = all_selects[1]
                    day_value = birth_date['day']

                    day_formats = [
                        day_value,  # "15"
                        str(int(day_value)).zfill(2),  # "15"
                        str(int(day_value) - 1),  # "14" (–µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0)
                        str(int(day_value) - 1).zfill(2)  # "14"
                    ]

                    day_filled = False
                    for fmt in day_formats:
                        try:
                            await day_select.select_option(value=fmt)
                            # –î–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω
                            day_filled = True
                            break
                        except:
                            continue

                    if not day_filled:
                        await day_select.click()
                        await asyncio.sleep(0.5)
                        day_option = await day_select.query_selector(f'option:nth-child({int(day_value) + 1})')
                        if day_option:
                            await day_option.click()
                            # –î–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω
                            day_filled = True

                    await asyncio.sleep(1)

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≥–æ–¥ (—Ç—Ä–µ—Ç–∏–π select)
                    year_select = all_selects[2]
                    year_value = birth_date['year']

                    year_formats = [
                        year_value,  # "1995"
                        str(year_value),  # "1995"
                    ]

                    year_filled = False
                    for fmt in year_formats:
                        try:
                            await year_select.select_option(value=fmt)
                            # –ì–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω
                            year_filled = True
                            break
                        except:
                            continue

                    if not year_filled:
                        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥–æ–¥ –≤ –æ–ø—Ü–∏—è—Ö
                        year_options = await year_select.query_selector_all('option')
                        for option in year_options:
                            try:
                                option_text = await option.inner_text()
                                if year_value in option_text:
                                    await option.click()
                                    # –ì–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω
                                    year_filled = True
                                    break
                            except:
                                continue

                    if month_filled and day_filled and year_filled:
                        # –î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
                        pass
                    else:
                        logger.warning(f"–î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ: –º–µ—Å—è—Ü={month_filled}, –¥–µ–Ω—å={day_filled}, –≥–æ–¥={year_filled}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è select —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")

                if month_filled and day_filled and year_filled:
                    date_filled = True

            # –°–ø–æ—Å–æ–± 2: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ role-based –ª–æ–∫–∞—Ç–æ—Ä—ã (fix –æ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞)
            if not date_filled:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ role-based –ª–æ–∫–∞—Ç–æ—Ä—ã
                try:
                    # Mapping –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                    month_mapping = {
                        "01": ["1", "01", "—è–Ω–≤–∞—Ä—å", "—è–Ω–≤", "january", "jan"],
                        "02": ["2", "02", "—Ñ–µ–≤—Ä–∞–ª—å", "—Ñ–µ–≤", "february", "feb"],
                        "03": ["3", "03", "–º–∞—Ä—Ç", "–º–∞—Ä", "march", "mar"],
                        "04": ["4", "04", "–∞–ø—Ä–µ–ª—å", "–∞–ø—Ä", "april", "apr"],
                        "05": ["5", "05", "–º–∞–π", "may"],
                        "06": ["6", "06", "–∏—é–Ω—å", "–∏—é–Ω", "june", "jun"],
                        "07": ["7", "07", "–∏—é–ª—å", "–∏—é–ª", "july", "jul"],
                        "08": ["8", "08", "–∞–≤–≥—É—Å—Ç", "–∞–≤–≥", "august", "aug"],
                        "09": ["9", "09", "—Å–µ–Ω—Ç—è–±—Ä—å", "—Å–µ–Ω", "september", "sep"],
                        "10": ["10", "–æ–∫—Ç—è–±—Ä—å", "–æ–∫—Ç", "october", "oct"],
                        "11": ["11", "–Ω–æ—è–±—Ä—å", "–Ω–æ—è", "november", "nov"],
                        "12": ["12", "–¥–µ–∫–∞–±—Ä—å", "–¥–µ–∫", "december", "dec"],
                    }

                    # –î–ª—è TikTok –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ 
                    month_options = month_mapping.get(birth_date["month"], [birth_date["month"]])

                    # –ï—Å–ª–∏ –º–µ—Å—è—Ü —á–∏—Å–ª–æ–≤–æ–π, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    if birth_date["month"].isdigit():
                        month_num = int(birth_date["month"])
                        month_names = {
                            1: ["—è–Ω–≤–∞—Ä—å"], 2: ["—Ñ–µ–≤—Ä–∞–ª—å"], 3: ["–º–∞—Ä—Ç"], 4: ["–∞–ø—Ä–µ–ª—å"],
                            5: ["–º–∞–π"], 6: ["–∏—é–Ω—å"], 7: ["–∏—é–ª—å"], 8: ["–∞–≤–≥—É—Å—Ç"], 
                            9: ["—Å–µ–Ω—Ç—è–±—Ä—å"], 10: ["–æ–∫—Ç—è–±—Ä—å"], 11: ["–Ω–æ—è–±—Ä—å"], 12: ["–¥–µ–∫–∞–±—Ä—å"]
                        }
                        month_options = month_names.get(month_num, month_options)
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü
                    day_options = [birth_date["day"], str(int(birth_date["day"]))]  # "09" –∏ "9"
                    year_options = [birth_date["year"]]

                    # –ò—â–µ–º combobox —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–º–µ–Ω–∞–º
                    month_locators = []
                    day_locators = []
                    year_locators = []
                    comboboxes = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ role="combobox"
                    try:
                        comboboxes = await page.get_by_role("combobox").all()
                        # –ü–æ–∏—Å–∫ combobox —ç–ª–µ–º–µ–Ω—Ç–æ–≤

                        for cb in comboboxes:
                            try:
                                accessible_name = await cb.get_attribute('aria-label') or await cb.get_attribute('aria-labelledby') or ""
                                inner_text = await cb.inner_text()
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º combobox

                                if any(word in accessible_name.lower() + inner_text.lower() for word in ['–º–µ—Å—è—Ü', 'month']):
                                    month_locators.append(cb)
                                elif any(word in accessible_name.lower() + inner_text.lower() for word in ['–¥–µ–Ω—å', 'day']):
                                    day_locators.append(cb)
                                elif any(word in accessible_name.lower() + inner_text.lower() for word in ['–≥–æ–¥', 'year']):
                                    year_locators.append(cb)
                            except:
                                continue
                    except:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ combobox —ç–ª–µ–º–µ–Ω—Ç—ã")

                    # –¢–∞–∫–∂–µ –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ select —ç–ª–µ–º–µ–Ω—Ç—ã
                    try:
                        selects = await page.query_selector_all('select')
                        for select in selects:
                            day_locators.append(select)
                    except:
                        pass

                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ä–µ–¥–∏ combobox, –¥–æ–±–∞–≤–ª—è–µ–º –î–µ–Ω—å –∏–∑ combobox'–æ–≤  
                    if not day_locators:
                        for cb in comboboxes:
                            try:
                                accessible_name = await cb.get_attribute('aria-label') or ""
                                inner_text = await cb.inner_text()
                                if any(word in accessible_name.lower() + inner_text.lower() for word in ['–¥–µ–Ω—å', 'day']):
                                    day_locators.append(cb)
                            except:
                                continue

                    # –õ–æ–∫–∞—Ç–æ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ—Å—è—Ü
                    month_filled = False
                    if month_locators:
                        try:
                            # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ—Å—è—Ü
                            month_cb = month_locators[0]
                            await month_cb.scroll_into_view_if_needed()
                            await month_cb.click()
                            await asyncio.sleep(1)

                            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è listbox –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–æ—Ä—Ç–∞–ª–µ
                            try:
                                await page.wait_for_selector('[role="listbox"]:visible', timeout=3000)
                            except:
                                logger.warning("Listbox –¥–ª—è –º–µ—Å—è—Ü–∞ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫")

                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –≤–æ–æ–±—â–µ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                            try:
                                all_visible_options = await page.query_selector_all('[role="option"]:visible')
                                # –û–ø—Ü–∏–∏ –¥–ª—è –º–µ—Å—è—Ü–∞ –Ω–∞–π–¥–µ–Ω—ã

                                if len(all_visible_options) > 0:
                                    # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ–ø—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                    for i, opt in enumerate(all_visible_options[:5]):
                                        try:
                                            opt_text = await opt.inner_text()
                                            # –û–ø—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
                                        except:
                                            pass
                                else:
                                    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–∏–º—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –º–µ—Å—è—Ü–∞!")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–ø—Ü–∏–π –º–µ—Å—è—Ü–∞: {e}")

                            # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é
                            # –ü–æ–∏—Å–∫ –æ–ø—Ü–∏–π –º–µ—Å—è—Ü–∞

                            for month_text in month_options:
                                # –ü–æ–∏—Å–∫ –º–µ—Å—è—Ü–∞

                                try:
                                    # –°–ø–æ—Å–æ–± 1: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                                    option = page.get_by_role("option", name=month_text, exact=True)
                                    option_count = await option.count()
                                    # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                                    if option_count > 0:
                                        await option.first.click()
                                        # –ú–µ—Å—è—Ü –≤—ã–±—Ä–∞–Ω
                                        month_filled = True
                                        break
                                except Exception as e:
                                    logger.warning(f"–û—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ '{month_text}': {e}")

                                try:
                                    # –°–ø–æ—Å–æ–± 2: —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                                    option = page.get_by_role("option").filter(has_text=month_text)
                                    option_count = await option.count()
                                    # –ü–æ–∏—Å–∫ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                                    if option_count > 0:
                                        await option.first.click()
                                        # –ú–µ—Å—è—Ü –≤—ã–±—Ä–∞–Ω (—á–∞—Å—Ç–∏—á–Ω–æ)
                                        month_filled = True
                                        break
                                except Exception as e:
                                    logger.warning(f"–û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ '{month_text}': {e}")

                                try:
                                    # –°–ø–æ—Å–æ–± 3: –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
                                    options = await page.query_selector_all('[role="option"]:visible')
                                    logger.info(f"–°–ø–æ—Å–æ–± 3: –∏—â–µ–º '{month_text}' —Å—Ä–µ–¥–∏ {len(options)} –æ–ø—Ü–∏–π")
                                    for i, opt in enumerate(options):
                                        try:
                                            opt_text = await opt.inner_text()
                                            if month_text.lower() in opt_text.lower():
                                                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{opt_text}' —Å–æ–¥–µ—Ä–∂–∏—Ç '{month_text}'")
                                                await opt.click()
                                                # –ú–µ—Å—è—Ü –≤—ã–±—Ä–∞–Ω
                                                month_filled = True
                                                break
                                        except Exception as e:
                                            logger.warning(f"–û—à–∏–±–∫–∞ —Å –æ–ø—Ü–∏–µ–π {i}: {e}")
                                    if month_filled:
                                        break
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–æ—Å–æ–±–∞ 3 –¥–ª—è '{month_text}': {e}")

                            if not month_filled:
                                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º!")
                                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–æ—Å–æ–± - –∫–ª–∏–∫ –ø–æ –ø–µ—Ä–≤–æ–π –æ–ø—Ü–∏–∏
                                try:
                                    first_option = await page.query_selector('[role="option"]:visible')
                                    if first_option:
                                        first_text = await first_option.inner_text()
                                        await first_option.click()
                                        logger.warning(f"‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–ø—Ü–∏—è: {first_text}")
                                        month_filled = True
                                except:
                                    logger.error("–î–∞–∂–µ –ø–µ—Ä–≤–∞—è –æ–ø—Ü–∏—è –Ω–µ –∫–ª–∏–∫–∞–µ—Ç—Å—è!")

                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Å—è—Ü–∞: {e}")

                    await asyncio.sleep(1)

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ–Ω—å
                    day_filled = False
                    if day_locators:
                        try:
                            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ–Ω—å
                            day_elem = day_locators[0]

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ Element (—Å—Ç–∞—Ä—ã–π API) –∏–ª–∏ Locator (–Ω–æ–≤—ã–π API)
                            if hasattr(day_elem, 'tag_name'):
                                # –≠—Ç–æ ElementHandle (—Å—Ç–∞—Ä—ã–π query_selector API)
                                tag_name = await day_elem.tag_name()
                                if tag_name == 'select':
                                    # –û–±—ã—á–Ω—ã–π select
                                    await day_elem.select_option(birth_date["day"])
                                    # –î–µ–Ω—å –≤—ã–±—Ä–∞–Ω
                                    day_filled = True
                                else:
                                    # –ö–∞—Å—Ç–æ–º–Ω—ã–π element, –∫–ª–∏–∫–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                                    await day_elem.click()
                                    await asyncio.sleep(2)

                                    # –ò—â–µ–º –æ–ø—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º listbox
                                    for day_text in day_options:
                                        try:
                                            option = page.get_by_role("option", name=day_text, exact=True)
                                            if await option.count() > 0:
                                                await option.first.click()
                                                # –î–µ–Ω—å –≤—ã–±—Ä–∞–Ω
                                                day_filled = True
                                                break
                                        except:
                                            continue
                            else:
                                # –≠—Ç–æ Locator (–Ω–æ–≤—ã–π get_by_role API) - combobox
                                await day_elem.scroll_into_view_if_needed()
                                await day_elem.click()
                                await asyncio.sleep(2)

                                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è listbox
                                try:
                                    await page.wait_for_selector('[role="listbox"]:visible', timeout=3000)
                                except:
                                    logger.warning("Listbox –¥–ª—è –¥–Ω—è –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã")

                                # –ò—â–µ–º –æ–ø—Ü–∏–∏
                                for day_text in day_options:
                                    try:
                                        option = page.get_by_role("option", name=day_text, exact=True)
                                        if await option.count() > 0:
                                            await option.first.click()
                                            # –î–µ–Ω—å –≤—ã–±—Ä–∞–Ω
                                            day_filled = True
                                            break
                                    except:
                                        continue

                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–Ω—è: {e}")

                    await asyncio.sleep(1)

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≥–æ–¥
                    year_filled = False
                    if year_locators:
                        try:
                            # –ó–∞–ø–æ–ª–Ω—è–µ–º –≥–æ–¥
                            year_cb = year_locators[0]
                            await year_cb.scroll_into_view_if_needed()
                            await year_cb.click()
                            await asyncio.sleep(1)

                            try:
                                await page.wait_for_selector('[role="listbox"]:visible', timeout=3000)
                            except:
                                logger.warning("Listbox –¥–ª—è –≥–æ–¥–∞ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫")

                            # –ò—â–µ–º –æ–ø—Ü–∏—é –≥–æ–¥–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤)
                            for year_text in year_options:
                                try:
                                    # –°–ø–æ—Å–æ–± 1: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                                    option = page.get_by_role("option", name=year_text, exact=True)
                                    if await option.count() > 0:
                                        await option.first.click()
                                        # –ì–æ–¥ –≤—ã–±—Ä–∞–Ω
                                        year_filled = True
                                        break
                                except:
                                    pass

                                try:
                                    # –°–ø–æ—Å–æ–± 2: —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                                    option = page.get_by_role("option").filter(has_text=year_text)
                                    if await option.count() > 0:
                                        await option.first.click()
                                        # –ì–æ–¥ –≤—ã–±—Ä–∞–Ω
                                        year_filled = True
                                        break
                                except:
                                    pass

                                try:
                                    # –°–ø–æ—Å–æ–± 3: –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä
                                    options = await page.query_selector_all('[role="option"]')
                                    for opt in options:
                                        opt_text = await opt.inner_text()
                                        if year_text in opt_text.strip():
                                            await opt.click()
                                            # –ì–æ–¥ –≤—ã–±—Ä–∞–Ω
                                            year_filled = True
                                            break
                                    if year_filled:
                                        break
                                except:
                                    continue

                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ–¥–∞: {e}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if month_filled and day_filled and year_filled:
                        # –í—Å–µ –ø–æ–ª—è –¥–∞—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                        date_filled = True
                    else:
                        logger.warning(f"–î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ: –º–µ—Å—è—Ü={month_filled}, –¥–µ–Ω—å={day_filled}, –≥–æ–¥={year_filled}")
                        date_filled = True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª–æ—Å—å

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ role-based –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")

            # –°–ø–æ—Å–æ–± 3: –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, –ø—Ä–æ–±—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            if not date_filled and len(custom_dropdowns) >= 3:
                logger.info("–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—è –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö dropdown —ç–ª–µ–º–µ–Ω—Ç–æ–≤  
                    dropdown_positions = []
                    for i, dropdown in enumerate(custom_dropdowns):
                        try:
                            box = await dropdown.bounding_box()
                            if box:
                                dropdown_positions.append((i, box['x'], box['y']))
                        except:
                            continue

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏), –ø–æ—Ç–æ–º –ø–æ X (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π)
                    dropdown_positions.sort(key=lambda x: (x[2], x[1]))

                    logger.info(f"–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π dropdown: {len(dropdown_positions)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ–ª—è –¥–∞—Ç—ã)
                    if len(dropdown_positions) >= 3:
                        date_indices = [pos[0] for pos in dropdown_positions[:3]]
                        logger.info(f"–í—ã–±—Ä–∞–Ω—ã dropdown —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏: {date_indices}")

                        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É: –º–µ—Å—è—Ü, –¥–µ–Ω—å, –≥–æ–¥
                        for idx, (field_name, field_value) in enumerate([("–º–µ—Å—è—Ü", birth_date["month"]), ("–¥–µ–Ω—å", birth_date["day"]), ("–≥–æ–¥", birth_date["year"])]):
                            if idx < len(date_indices):
                                dropdown_idx = date_indices[idx]
                                await custom_dropdowns[dropdown_idx].click()
                                await asyncio.sleep(1)

                                option = await page.query_selector(f'*:has-text("{field_value}")')
                                if option:
                                    await option.click()
                                    logger.success(f"‚úÖ {field_name} –∑–∞–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π")

                                await asyncio.sleep(1)

                        date_filled = True

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–π dropdown: {e}")

            # –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
            if not date_filled:
                logger.info("–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                try:
                    # –ò—â–µ–º –≤—Å–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    clickable_elements = await page.query_selector_all('div[role="button"], span[role="button"], button, div[class*="select"], div[class*="dropdown"]')

                    for elem in clickable_elements:
                        try:
                            text = await elem.inner_text()
                            if text and ('–º–µ—Å—è—Ü' in text.lower() or 'month' in text.lower()):
                                await elem.click()
                                await asyncio.sleep(1)
                                # –ò—â–µ–º –Ω—É–∂–Ω—ã–π –º–µ—Å—è—Ü –≤ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –æ–ø—Ü–∏—è—Ö
                                month_options = await page.query_selector_all('[role="option"], li, div[class*="option"]')
                                for opt in month_options:
                                    opt_text = await opt.inner_text()
                                    if birth_date['month'] in opt_text:
                                        await opt.click()
                                        # –ú–µ—Å—è—Ü –∑–∞–ø–æ–ª–Ω–µ–Ω
                                        break
                                break
                        except:
                            continue

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {e}")

            if not date_filled:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤")
                logger.warning("–í–æ–∑–º–æ–∂–Ω–æ, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ TikTok –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ")
            else:
                # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
                pass

            # –ó–∞–ø–æ–ª–Ω—è–µ–º email - –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö input —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            # –ó–∞–ø–æ–ª–Ω—è–µ–º email

            all_inputs = await page.query_selector_all('input')
            email_filled = False

            for i, input_elem in enumerate(all_inputs):
                try:
                    input_type = await input_elem.get_attribute('type')
                    input_name = await input_elem.get_attribute('name')
                    input_placeholder = await input_elem.get_attribute('placeholder')

                    # –ò—â–µ–º –ø–æ–ª–µ email –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
                    if (input_type == 'email' or 
                        (input_name and 'email' in input_name.lower()) or
                        (input_placeholder and ('email' in input_placeholder.lower() or '–ø–æ—á—Ç–∞' in input_placeholder.lower())) or
                        input_type == 'text'):

                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å
                        await input_elem.fill(email)
                        # Email –∑–∞–ø–æ–ª–Ω–µ–Ω
                        email_filled = True
                        break
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Å input {i}: {e}")
                    continue

            if not email_filled:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ email, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π input")
                try:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π input –∫–∞–∫ –ø–æ–ª–µ email
                    first_text_input = await page.query_selector('input[type="text"], input:not([type])')
                    if first_text_input:
                        await first_text_input.fill(email)
                        logger.info("Email –∑–∞–ø–æ–ª–Ω–µ–Ω –≤ –ø–µ—Ä–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ")
                        email_filled = True
                except:
                    pass

            await asyncio.sleep(1)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å

            password_inputs = await page.query_selector_all('input[type="password"]')
            password_filled = False

            if password_inputs:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
                await password_inputs[0].fill(password)
                # –ü–∞—Ä–æ–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω
                password_filled = True
            else:
                logger.warning("–ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –ø–∞—Ä–æ–ª—è –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ")

            await asyncio.sleep(2)

            # –í–ê–ñ–ù–û: –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º —á–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—Å–∏—è (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
            logger.info("–ò—â–µ–º —á–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—Å–∏—è...")

            checkbox_clicked = False
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ input —ç–ª–µ–º–µ–Ω—Ç—ã 
                all_inputs = await page.query_selector_all('input')
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ input —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(all_inputs)}")

                for i, input_elem in enumerate(all_inputs):
                    try:
                        input_type = await input_elem.get_attribute('type')
                        input_class = await input_elem.get_attribute('class') or ""
                        is_visible = await input_elem.is_visible()

                        logger.info(f"Input {i}: type={input_type}, class={input_class[:50]}, visible={is_visible}")

                        # –ò—â–µ–º –∏–º–µ–Ω–Ω–æ checkbox
                        if input_type == 'checkbox' and is_visible:
                            logger.info(f"–ù–∞–π–¥–µ–Ω —á–µ–∫–±–æ–∫—Å {i}, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å...")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
                            is_checked_before = await input_elem.is_checked()
                            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –î–û –∫–ª–∏–∫–∞: {is_checked_before}")

                            try:
                                # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∫–ª–∏–∫–∞
                                for attempt in range(3):
                                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                                    box = await input_elem.bounding_box()
                                    if box:
                                        center_x = box['x'] + box['width'] / 2
                                        center_y = box['y'] + box['height'] / 2
                                        await page.mouse.click(center_x, center_y)
                                        await asyncio.sleep(0.5)

                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                                        is_checked_after = await input_elem.is_checked()
                                        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –∫–ª–∏–∫–∞: {is_checked_after}")

                                        if is_checked_after != is_checked_before:
                                            # –ß–µ–∫–±–æ–∫—Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω
                                            checkbox_clicked = True
                                            break
                                    else:
                                        # –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫
                                        await input_elem.click()
                                        await asyncio.sleep(0.5)

                                        is_checked_after = await input_elem.is_checked()
                                        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} (–æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï: {is_checked_after}")

                                        if is_checked_after != is_checked_before:
                                            # –ß–µ–∫–±–æ–∫—Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω
                                            checkbox_clicked = True
                                            break

                                if not checkbox_clicked:
                                    logger.warning(f"‚ö†Ô∏è –ß–µ–∫–±–æ–∫—Å {i} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏")

                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —á–µ–∫–±–æ–∫—Å—É {i}: {e}")

                            break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞

                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ —Å input {i}: {e}")
                        continue

                if not checkbox_clicked:
                    logger.warning("‚ö†Ô∏è –ß–µ–∫–±–æ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–µ–≥–æ")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ–∫–±–æ–∫—Å–∞: {e}")

            await asyncio.sleep(2)

            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥" (–ù–ï "–î–∞–ª–µ–µ"!)
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞

            send_code_clicked = False
            all_buttons = await page.query_selector_all('button')

            for i, button_elem in enumerate(all_buttons):
                try:
                    button_text = await button_elem.inner_text()
                    button_disabled = await button_elem.get_attribute('disabled')
                    is_enabled = await button_elem.is_enabled()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É

                    # –ò—â–µ–º –∏–º–µ–Ω–Ω–æ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"
                    if (button_text and any(keyword in button_text.lower() for keyword in 
                          ['–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥', 'send code', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å']) 
                          and is_enabled and not button_disabled):

                        await button_elem.click()
                        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞
                        send_code_clicked = True
                        break
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π {i}: {e}")
                    continue

            if not send_code_clicked:
                logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!")
                logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:")
                for i, button in enumerate(all_buttons):
                    try:
                        text = await button.inner_text()
                        enabled = await button.is_enabled()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É
                    except:
                        pass

            await asyncio.sleep(3)

            # –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –¥–ª—è –∫–æ–¥–∞ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
            # –û–∂–∏–¥–∞–µ–º –ø–æ–ª–µ –¥–ª—è –∫–æ–¥–∞

            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –¥–ª—è –∫–æ–¥–∞
                code_input = await page.wait_for_selector('input[placeholder*="–∫–æ–¥"], input[placeholder*="code"], input[maxlength="6"]', timeout=10000)
                if code_input:
                    # –ü–æ–ª–µ –∫–æ–¥–∞ –ø–æ—è–≤–∏–ª–æ—Å—å

                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ mail.tm API
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥

                    verification_code = None
                    if account_id and email_password:  # –ï—Å–ª–∏ email —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ mail.tm
                        logger.info("‚úÖ Email —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ mail.tm - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞...")
                        verification_code = await self.get_verification_code_from_mailtm(email, email_password, account_id)
                    elif "1secmail.com" in email:
                        # Fallback email 1secmail
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ 1secmail
                        verification_code = await self.get_verification_code_from_1secmail_improved(email)
                    else:
                        logger.warning(f"‚ùå Email –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤: {email}")

                    if verification_code:
                        logger.success(f"‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ email: {verification_code}")

                        # –í–≤–æ–¥–∏–º –∫–æ–¥ –≤ –ø–æ–ª–µ
                        try:
                            await code_input.fill('')  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                            await code_input.type(verification_code, delay=100)
                            logger.success(f"‚úÖ –ö–æ–¥ {verification_code} –≤–≤–µ–¥–µ–Ω –≤ –ø–æ–ª–µ!")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {e}")
                    else:
                        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                        logger.warning("üîî –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ô –í–í–û–î –ö–û–î–ê!")
                        logger.warning("üìß –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email: " + email)
                        logger.warning("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –≤—Ä—É—á–Ω—É—é")

                        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞...")
                        await asyncio.sleep(30)

                    # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏—â–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                    logger.info("–ò—â–µ–º –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ' –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞...")

                    final_buttons = await page.query_selector_all('button')
                    for button in final_buttons:
                        try:
                            btn_text = await button.inner_text()
                            is_enabled = await button.is_enabled()
                            if (any(word in btn_text.lower() for word in ['–¥–∞–ª–µ–µ', 'next', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue']) 
                                and is_enabled):
                                await button.click()
                                logger.success(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–î–∞–ª–µ–µ': {btn_text}")
                                break
                        except:
                            continue

                    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–∞
                    if username:
                        logger.info("üë§ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–∞...")
                        await asyncio.sleep(3)

                        # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        username_selectors = [
                            'input[placeholder*="–∏–º—è"]',
                            'input[placeholder*="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª"]', 
                            'input[placeholder*="username"]',
                            'input[placeholder*="–Ω–∏–∫"]',
                            'input[data-testid*="username"]',
                            'input[name*="username"]',
                            'input[id*="username"]'
                        ]

                        username_input = None
                        for selector in username_selectors:
                            try:
                                username_input = await page.wait_for_selector(selector, timeout=5000)
                                if username_input:
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –Ω–∏–∫–Ω–µ–π–º–∞: {selector}")
                                    break
                            except:
                                continue

                        if username_input:
                            try:
                                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –Ω–∏–∫–Ω–µ–π–º
                                await username_input.fill('')
                                await username_input.type(username, delay=100)
                                logger.success(f"‚úÖ –ù–∏–∫–Ω–µ–π–º {username} –≤–≤–µ–¥–µ–Ω!")

                                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                                await asyncio.sleep(2)

                                registration_buttons = await page.query_selector_all('button')
                                for button in registration_buttons:
                                    try:
                                        btn_text = await button.inner_text()
                                        is_enabled = await button.is_enabled()
                                        if (any(word in btn_text.lower() for word in ['—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'register', '—Å–æ–∑–¥–∞—Ç—å', 'create', '–¥–∞–ª–µ–µ', 'next']) 
                                            and is_enabled):
                                            await button.click()
                                            logger.success(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {btn_text}")
                                            break
                                    except:
                                        continue

                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞: {e}")
                        else:
                            logger.warning("‚ùå –ü–æ–ª–µ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    logger.warning("–ü–æ–ª–µ –¥–ª—è –∫–æ–¥–∞ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—è –∫–æ–¥–∞: {e}")

            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (fallback)
            logger.info("–ò—â–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

            button_clicked = False
            all_buttons = await page.query_selector_all('button')

            for i, button_elem in enumerate(all_buttons):
                try:
                    button_text = await button_elem.inner_text()
                    button_disabled = await button_elem.get_attribute('disabled')

                    # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    if (button_text and any(keyword in button_text.lower() for keyword in 
                          ['–¥–∞–ª–µ–µ', 'next', '—Ä–µ–≥–∏—Å—Ç—Ä', 'sign up', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue']) 
                          and not button_disabled):

                        await button_elem.click()
                        logger.success(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: '{button_text}'")
                        button_clicked = True
                        break
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π {i}: {e}")
                    continue

            if not button_clicked:
                logger.warning("–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é")
                try:
                    available_buttons = await page.query_selector_all('button:not([disabled])')
                    if available_buttons:
                        await available_buttons[0].click()
                        logger.info("–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
                        button_clicked = True
                except:
                    pass

            await asyncio.sleep(3)

            # –†–µ—à–∞–µ–º –∫–∞–ø—á—É –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–ø—á–∏")
            await captcha_solver.solve_captcha_if_present()
            await asyncio.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            try:
                await asyncio.sleep(5)
                current_url = page.url
                logger.info(f"–¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {current_url}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ URL –∏–ª–∏ –Ω–∞–ª–∏—á–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if ('following' in current_url or 'foryou' in current_url or 
                    'welcome' in current_url or 'onboarding' in current_url or
                    'verification' in current_url or 'signup' not in current_url):
                    logger.success("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ –ø–æ–ª–µ –¥–ª—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                code_inputs = await page.query_selector_all('input[placeholder*="–∫–æ–¥"], input[placeholder*="code"], input[maxlength="6"]')
                if code_inputs:
                    logger.success("üéâ –î–æ—à–ª–∏ –¥–æ —ç—Ç–∞–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    logger.warning("üìß –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ email")
                    return True

                logger.warning(f"–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_url}")
                try:
                    # –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω 
                    logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                except:
                    pass
                return False

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {type(e).__name__}: {str(e)}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                # –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω
                logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            except:
                pass
            return False

    def _save_account(self, email: str, password: str, username: str = ""):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ —Ñ–∞–π–ª (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)"""
        try:
            with open(self.accounts_output_filename, 'a', encoding='utf-8') as f:
                if username:
                    f.write(f"{email}:{password}:{username}\n")
                    logger.success(f"üìÅ –ê–∫–∫–∞—É–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {email} (–Ω–∏–∫: {username})")
                else:
                    f.write(f"{email}:{password}\n")
                    logger.success(f"üìÅ –ê–∫–∫–∞—É–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {email}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")

    async def get_verification_code_from_mailtm(self, email: str, email_password: str, account_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ mail.tm –∏—Å–ø–æ–ª—å–∑—É—è API"""
        import urllib.request
        import urllib.parse
        import json
        import re

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω

            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_data = {
                "address": email,
                "password": email_password
            }

            req_data = json.dumps(auth_data).encode('utf-8')
            req = urllib.request.Request(
                "https://api.mail.tm/token",
                data=req_data,
                headers={'Content-Type': 'application/json'},
                method='POST'
            )

            token = None
            with urllib.request.urlopen(req, timeout=10) as response:
                if response.status == 200:
                    token_data = json.loads(response.read().decode('utf-8'))
                    token = token_data.get('token')
                    logger.success("‚úÖ –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω")
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status}")

            if not token:
                raise Exception("–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")

            # 2. –ñ–¥–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for attempt in range(24):  # 24 –ø–æ–ø—ã—Ç–∫–∏ –ø–æ 5 —Å–µ–∫—É–Ω–¥ = 2 –º–∏–Ω—É—Ç—ã
                try:
                    logger.info(f"üì¨ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/24 –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")

                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                    req = urllib.request.Request(
                        "https://api.mail.tm/messages",
                        headers={'Authorization': f'Bearer {token}'}
                    )

                    with urllib.request.urlopen(req, timeout=10) as response:
                        if response.status == 200:
                            messages_data = json.loads(response.read().decode('utf-8'))
                            messages = messages_data.get('hydra:member', [])

                            if messages:
                                logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

                                # –ò—â–µ–º –ø–∏—Å—å–º–æ –æ—Ç TikTok
                                for message in messages:
                                    subject = message.get('subject', '').lower()
                                    sender_info = message.get('from', {})
                                    sender = sender_info.get('address', '').lower() if sender_info else ''

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç TikTok
                                    if any(keyword in subject + sender for keyword in 
                                           ['tiktok', 'verification', '–∫–æ–¥', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 'verify', 'noreply']):

                                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ –æ—Ç TikTok: {subject}")

                                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
                                        message_id = message.get('id')
                                        req = urllib.request.Request(
                                            f"https://api.mail.tm/messages/{message_id}",
                                            headers={'Authorization': f'Bearer {token}'}
                                        )

                                        with urllib.request.urlopen(req, timeout=10) as msg_response:
                                            if msg_response.status == 200:
                                                msg_data = json.loads(msg_response.read().decode('utf-8'))

                                                # –ò—â–µ–º –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞
                                                text_content = msg_data.get('text', '') + ' ' + msg_data.get('intro', '')
                                                html_content = ' '.join(msg_data.get('html', []))
                                                full_content = text_content + ' ' + html_content

                                                logger.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞: {full_content[:200]}...")

                                                # –ò–∑–≤–ª–µ–∫–∞–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
                                                code_patterns = [
                                                    r'\b(\d{6})\b',  # 6 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
                                                    r'–∫–æ–¥[\s:]*([\d\s]{6,})',  # "–∫–æ–¥: 123456"
                                                    r'code[\s:]*([\d\s]{6,})',  # "code: 123456"
                                                    r'verification[\s\w]*[\s:]*([\d\s]{6,})',
                                                ]

                                                for pattern in code_patterns:
                                                    matches = re.findall(pattern, full_content, re.IGNORECASE)
                                                    for match in matches:
                                                        # –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
                                                        clean_code = re.sub(r'\s+', '', match)
                                                        if clean_code.isdigit() and len(clean_code) == 6:
                                                            logger.success(f"üéØ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω: {clean_code}")
                                                            return clean_code

                                                logger.warning("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –ø–∏—Å—å–º–∞")
                                            else:
                                                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∏—Å—å–º–∞: {msg_response.status}")
                                    else:
                                        logger.debug(f"üì≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∏—Å—å–º–æ: {subject} –æ—Ç {sender}")
                            else:
                                logger.debug("üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {response.status}")

                    # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(5)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    await asyncio.sleep(5)
                    continue

            logger.warning("‚ùå –ö–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω –∑–∞ 2 –º–∏–Ω—É—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è")
            return None

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ mail.tm: {e}")
            return None

    async def get_verification_code_from_1secmail(self, email):
        """
        Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∏–∑ 1secmail.com (—Å—Ç–∞—Ä–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        """
        import urllib.request
        import urllib.parse
        import json
        import re

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ email
            username = email.split('@')[0]
            logger.info(f"üîÑ Fallback: –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

            # API 1secmail.com –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º  
            base_url = "https://www.1secmail.com/api/v1/"

            # –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
            for attempt in range(12):  # 12 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 5 —Å–µ–∫—É–Ω–¥
                try:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/12 –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º...")

                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
                    messages_url = f"{base_url}?action=getMessages&login={username}&domain=1secmail.com"

                    with urllib.request.urlopen(messages_url, timeout=10) as response:
                        if response.status == 200:
                            messages_data = response.read().decode('utf-8')
                            messages = json.loads(messages_data)

                            if messages:
                                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} –ø–∏—Å–µ–º")

                                # –ò—â–µ–º –ø–∏—Å—å–º–æ –æ—Ç TikTok
                                for message in messages:
                                    subject = message.get('subject', '').lower()
                                    sender = message.get('from', '').lower()

                                    if any(keyword in subject + sender for keyword in 
                                           ['tiktok', 'verification', '–∫–æ–¥', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 'noreply']):

                                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
                                        msg_url = f"{base_url}?action=readMessage&login={username}&domain=1secmail.com&id={message['id']}"

                                        with urllib.request.urlopen(msg_url, timeout=10) as msg_response:
                                            if msg_response.status == 200:
                                                msg_data_raw = msg_response.read().decode('utf-8')
                                                msg_data = json.loads(msg_data_raw)

                                                # –ò—â–µ–º –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ
                                                text_content = msg_data.get('textBody', '') + ' ' + msg_data.get('htmlBody', '')

                                                # –ò–∑–≤–ª–µ–∫–∞–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
                                                code_match = re.search(r'\b(\d{6})\b', text_content)
                                                if code_match:
                                                    code = code_match.group(1)
                                                    logger.success(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω: {code}")
                                                    return code
                                            else:
                                                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞: {msg_response.status}")

                    # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(5)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    await asyncio.sleep(5)
                    continue

            logger.warning("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ 60 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
            return None

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ 1secmail: {e}")
            return None

    async def get_verification_code_from_1secmail_improved(self, email):
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∏–∑ 1secmail.com —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        """
        import urllib.request
        import urllib.parse
        import json
        import re
        import time
        from urllib.error import HTTPError, URLError

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ email
            username = email.split('@')[0]
            logger.info(f"üîÑ Improved 1secmail: –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API endpoints –¥–ª—è 1secmail
            api_endpoints = [
                "https://www.1secmail.com/api/v1/",
                "https://1secmail.com/api/v1/",
                "https://api.1secmail.com/v1/"
            ]

            # –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ (—É–º–µ–Ω—å—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)
            for attempt in range(6):  # 6 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 5 —Å–µ–∫—É–Ω–¥
                try:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/6 –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º...")
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API endpoints
                    for base_url in api_endpoints:
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
                            messages_url = f"{base_url}?action=getMessages&login={username}&domain=1secmail.com"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º user-agent —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                            req = urllib.request.Request(messages_url)
                            req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
                            req.add_header('Accept', 'application/json')

                            with urllib.request.urlopen(req, timeout=10) as response:
                                if response.status == 200:
                                    messages_data = response.read().decode('utf-8')
                                    messages = json.loads(messages_data)

                                    if messages:
                                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ {base_url}")

                                        # –ò—â–µ–º –ø–∏—Å—å–º–æ –æ—Ç TikTok
                                        for message in messages:
                                            subject = message.get('subject', '').lower()
                                            sender = message.get('from', '').lower()

                                            if any(keyword in subject + sender for keyword in 
                                                   ['tiktok', 'verification', '–∫–æ–¥', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 'noreply']):

                                                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
                                                msg_url = f"{base_url}?action=readMessage&login={username}&domain=1secmail.com&id={message['id']}"
                                                
                                                msg_req = urllib.request.Request(msg_url)
                                                msg_req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
                                                msg_req.add_header('Accept', 'application/json')

                                                with urllib.request.urlopen(msg_req, timeout=10) as msg_response:
                                                    if msg_response.status == 200:
                                                        msg_data_raw = msg_response.read().decode('utf-8')
                                                        msg_data = json.loads(msg_data_raw)

                                                        # –ò—â–µ–º –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ
                                                        text_content = msg_data.get('textBody', '') + ' ' + msg_data.get('htmlBody', '')
                                                        
                                                        # –ò—â–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
                                                        code_match = re.search(r'\b\d{6}\b', text_content)
                                                        if code_match:
                                                            verification_code = code_match.group()
                                                            logger.success(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_code}")
                                                            return verification_code

                                        break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç endpoint, –Ω–µ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ
                                    else:
                                        logger.info(f"–ü–∏—Å–µ–º –ø–æ–∫–∞ –Ω–µ—Ç —á–µ—Ä–µ–∑ {base_url}")
                                        
                        except HTTPError as he:
                            logger.warning(f"HTTP –æ—à–∏–±–∫–∞ –¥–ª—è {base_url}: {he.code} {he.reason}")
                            if he.code == 403:
                                logger.warning("API endpoint –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                                continue
                        except URLError as ue:
                            logger.warning(f"URL –æ—à–∏–±–∫–∞ –¥–ª—è {base_url}: {ue.reason}")
                            continue
                        except Exception as ee:
                            logger.warning(f"–û—à–∏–±–∫–∞ –¥–ª—è {base_url}: {ee}")
                            continue

                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    if attempt < 5:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
                        await asyncio.sleep(5)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    if attempt < 5:
                        await asyncio.sleep(5)

            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ 1secmail")
            return None

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ 1secmail: {e}")
            return None

    async def run_registration(self, count: int):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ TikTok")

        start_time = time.time()

        for i in range(count):
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç {i + 1}/{count}")

            try:
                success = await self.register_account()

                if success:
                    logger.success(f"–ê–∫–∫–∞—É–Ω—Ç {i + 1}/{count} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç {i + 1}/{count}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
                delay = random.uniform(5, 15)
                logger.info(f"–ü–∞—É–∑–∞ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
                await asyncio.sleep(delay)

            except KeyboardInterrupt:
                logger.warning("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {str(e)}")
                continue

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = time.time()
        duration = end_time - start_time
        successful = len(self.successful_accounts)

        logger.info("=" * 50)
        logger.info("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò")
        logger.info("=" * 50)
        logger.info(f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {count}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {successful}")
        logger.info(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {self.failed_count}")
        logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/count)*100:.1f}%")
        logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration/60:.1f} –º–∏–Ω—É—Ç")
        logger.info("=" * 50)

        if successful > 0:
            logger.success(f"–ê–∫–∫–∞—É–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {self.accounts_output_filename}")

    async def run_parallel_registration(self, total_count: int, windows_count: int):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: 1 –æ–∫–Ω–æ = 1 –∞–∫–∫–∞—É–Ω—Ç"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {total_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        logger.info(f"üíª –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω: {windows_count} (–ø–æ 1 –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ –æ–∫–Ω–æ)")
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        semaphore = asyncio.Semaphore(windows_count)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
        
        window_tasks = []
        for account_number in range(1, total_count + 1):
            task = asyncio.create_task(
                self.single_account_worker(account_number, total_count, semaphore)
            )
            window_tasks.append(task)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*window_tasks, return_exceptions=True)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_results = sum(1 for result in results if result is True)
            
        except KeyboardInterrupt:
            logger.warning("‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = time.time()
        duration = end_time - start_time
        successful = len(self.successful_accounts)
        
        logger.info("=" * 50)
        logger.info("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò")
        logger.info("=" * 50)
        logger.info(f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_count}")
        logger.info(f"–û–∫–æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {windows_count}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {successful}")
        logger.info(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {self.failed_count}")
        logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/total_count)*100:.1f}%")
        logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration/60:.1f} –º–∏–Ω—É—Ç")
        logger.info(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: –≤ ~{windows_count:.1f} —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!")
        logger.info("=" * 50)
        
        if successful > 0:
            logger.success(f"–ê–∫–∫–∞—É–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {self.accounts_output_filename}")
    
    async def single_account_worker(self, account_number: int, total_count: int, semaphore: asyncio.Semaphore) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 1 –∞–∫–∫–∞—É–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ"""
        async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω
            logger.info(f"üöÄ –û–∫–Ω–æ {account_number}: —Å—Ç–∞—Ä—Ç—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {account_number}/{total_count}")
            
            try:
                # –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                browser, context = await self.create_browser_context(account_number)
                
                try:
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º 1 –∞–∫–∫–∞—É–Ω—Ç
                    success = await self.register_account_with_context(context, account_number)
                    
                    if success:
                        logger.success(f"‚úÖ –û–∫–Ω–æ {account_number}: –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! ({account_number}/{total_count})")
                        return True
                    else:
                        logger.error(f"‚ùå –û–∫–Ω–æ {account_number}: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ ({account_number}/{total_count})")
                        return False
                        
                finally:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    await context.close()
                    await browser.close()
                    logger.info(f"üîí –û–∫–Ω–æ {account_number}: –∑–∞–∫—Ä—ã—Ç–æ")
                    
                    # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
                    delay = random.uniform(self.config.delay_min, self.config.delay_max)
                    logger.info(f"‚è±Ô∏è –û–∫–Ω–æ {account_number}: –ø–∞—É–∑–∞ {delay:.1f}—Å")
                    await asyncio.sleep(delay)
                    
            except Exception as e:
                logger.error(f"‚ùå –û–∫–Ω–æ {account_number}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False

    async def _wait_for_verification_code(self, account_id: str, window_id: int) -> Optional[str]:
        """–û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        logger.info(f"üì¨ –û–∫–Ω–æ {window_id}: –æ–∂–∏–¥–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        
        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ email –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ mail.tm
            email_data = await self.data_generator.generate_email()  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            if 'mail.tm' in email_data['email']:
                code = await self.get_verification_code_from_mailtm(
                    email_data['email'], 
                    email_data['password'], 
                    account_id
                )
                if code:
                    return code
            
            # Fallback –∫ —É–ª—É—á—à–µ–Ω–Ω–æ–º—É 1secmail –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
            code = await self.get_verification_code_from_1secmail_improved(email_data['email'])
            return code if code else None
            
        except Exception as e:
            logger.error(f"‚ùå –û–∫–Ω–æ {window_id}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            return None

    async def _enter_verification_code(self, page, verification_code: str, window_id: int):
        """–í–≤–æ–¥–∏—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            logger.info(f"üîë –û–∫–Ω–æ {window_id}: –≤–≤–æ–¥–∏–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_code}")
            
            # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            code_selectors = [
                'input[name*="verification"], input[placeholder*="verification"]',
                'input[name*="code"], input[placeholder*="code"]',
                'input[type="text"][maxlength="6"]',
                'input[type="text"][maxlength="4"]',
                'input[data-testid*="verification"], input[data-testid*="code"]'
            ]
            
            code_input = None
            for selector in code_selectors:
                try:
                    await page.wait_for_selector(selector, timeout=10000)
                    code_input = selector
                    break
                except:
                    continue
            
            if code_input:
                await page.fill(code_input, verification_code)
                logger.info(f"‚úÖ –û–∫–Ω–æ {window_id}: –∫–æ–¥ –≤–≤–µ–¥—ë–Ω –≤ –ø–æ–ª–µ")
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                submit_selectors = [
                    'button:has-text("Verify")', 'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
                    'button:has-text("Submit")', 'button:has-text("Continue")',
                    'button[type="submit"]', 'div[role="button"]:has-text("Verify")'
                ]
                
                for selector in submit_selectors:
                    try:
                        await page.wait_for_selector(selector, timeout=5000)
                        await page.click(selector)
                        logger.info(f"‚úÖ –û–∫–Ω–æ {window_id}: –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                        break
                    except:
                        continue
                
                await asyncio.sleep(3)  # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            else:
                logger.error(f"‚ùå –û–∫–Ω–æ {window_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û–∫–Ω–æ {window_id}: –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {e}")

    async def register_account_with_context(self, context, window_id: int) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç TikTok —Å –≥–æ—Ç–æ–≤—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        email_data = await self.data_generator.generate_email(window_id=window_id)
        email = email_data["email"]
        email_password = email_data["password"]
        account_id = email_data["account_id"]
        
        password = self.data_generator.generate_password()
        birth_date = self.data_generator.generate_birth_date()
        username = self.data_generator.generate_username(self.username_prefix) if self.username_prefix else ""
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        logger.info(f"üì´ –û–∫–Ω–æ {window_id}: Email account_id={account_id}")
        logger.info(f"üë§ –û–∫–Ω–æ {window_id}: –ù–∏–∫–Ω–µ–π–º: {username}")
        
        try:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ)
            page = await context.new_page()
            page.set_default_timeout(self.config.page_load_timeout * 1000)
            
            try:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º stealth —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                try:
                    stealth_config = StealthConfig(
                        navigator_languages=False,
                        navigator_vendor=False,
                        navigator_user_agent=False
                    )
                    await stealth_async(page, stealth_config)
                except Exception as e:
                    logger.warning(f"–û–∫–Ω–æ {window_id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å stealth: {e}")
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–ø—á–∞ solver
                captcha_solver = CaptchaSolver(
                    page,
                    self.config.sadcaptcha_api_key,
                    self.config
                )
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ TikTok
                await page.goto("https://www.tiktok.com/signup/phone-or-email/email", timeout=60000)
                logger.info(f"üåç –û–∫–Ω–æ {window_id}: –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                
                # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
                await asyncio.sleep(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É
                await captcha_solver.solve_captcha_if_present()
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤–º–µ—Å—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ
                logger.info(f"‚úçÔ∏è –û–∫–Ω–æ {window_id}: –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø–æ–ª–Ω—ã–º –º–µ—Ç–æ–¥–æ–º")
                success = await self._fill_registration_form(page, email, password, birth_date, captcha_solver, email_password, account_id, username)
                
                if success:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    await asyncio.sleep(5)
                    current_url = page.url
                    
                    if "signup" not in current_url.lower() and "register" not in current_url.lower():
                        # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                        self._save_account(email, password, username)
                        self.successful_accounts.append({'email': email, 'password': password, 'username': username})
                        logger.success(f"‚úÖ –û–∫–Ω–æ {window_id}: –∞–∫–∫–∞—É–Ω—Ç {email} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
                        return True
                    else:
                        logger.error(f"‚ùå –û–∫–Ω–æ {window_id}: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, URL: {current_url}")
                        self.failed_count += 1
                        return False
                else:
                    logger.error(f"‚ùå –û–∫–Ω–æ {window_id}: –æ—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã")
                    self.failed_count += 1
                    return False
                    
            finally:
                await page.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û–∫–Ω–æ {window_id}: –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {email}: {e}")
            self.failed_count += 1
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("    –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ê–ö–ö–ê–£–ù–¢–û–í TIKTOK")
    print("=" * 60)
    print()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –¥–ª—è –∫–∞–ø—á–∏
    if not config.sadcaptcha_api_key or config.sadcaptcha_api_key == "SADCAPCHA_API_KEY":
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á –¥–ª—è –∫–∞–ø—á–∏!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è SADCAPTCHA_API_KEY —Å –≤–∞—à–∏–º API –∫–ª—é—á–æ–º")
        print("–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ (2captcha, anticaptcha –∏ —Ç.–¥.)")
        print("–ù–∞–ø—Ä–∏–º–µ—Ä: export SADCAPTCHA_API_KEY=your_api_key_here")
        print()
        api_key = input("–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á —Å–µ–π—á–∞—Å: ").strip()
        if api_key:
            config.sadcaptcha_api_key = api_key
        else:
            print("API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –í—ã—Ö–æ–¥.")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–∫—Å–∏
    if not os.path.exists(config.proxies_filename):
        print(f"‚ùå –§–∞–π–ª {config.proxies_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ip:port:username:password")
        return

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        while True:
            try:
                count = int(input("–°–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å? "))
                if count > 0:
                    break
                else:
                    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        while True:
            try:
                windows_count = int(input("–°–∫–æ–ª—å–∫–æ –æ–∫–æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏? (1-10): "))
                if 1 <= windows_count <= 10:
                    break
                else:
                    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10!")
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ {windows_count} –æ–∫–Ω–∞—Ö...")
        print("üíª –ö–∞–∂–¥–æ–µ –æ–∫–Ω–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤
        username_prefix = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: aiogramxd): ").strip()
        if not username_prefix:
            print("‚ö†Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∏–∫–Ω–µ–π–º—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è.")
        else:
            print(f"üë§ –ù–∏–∫–Ω–µ–π–º—ã –±—É–¥—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {username_prefix}_—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        output_filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: accounts.txt): ").strip()
        if not output_filename:
            output_filename = "acs.txt"
            print("üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {output_filename}")
        else:
            print(f"üíæ –ê–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: {output_filename}")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        registrator = TikTokRegistration(config, username_prefix, output_filename)
        asyncio.run(registrator.run_parallel_registration(count, windows_count))

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()